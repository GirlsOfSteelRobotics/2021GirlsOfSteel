// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
public JoystickButton autoLine;
public JoystickButton extendCollector;
public JoystickButton retractCollector;
public Joystick driverJoystick;
public JoystickButton angleUp;
public JoystickButton angleDown;
public JoystickButton intakeBall;
public JoystickButton reverseBall;
public JoystickButton feedIn;
public JoystickButton feedOut;
public JoystickButton runShooter;
public JoystickButton stopShooter;
public JoystickButton autoShoot;
public Joystick operatorJoystick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

operatorJoystick = new Joystick(1);

autoShoot = new JoystickButton(operatorJoystick, 9);
autoShoot.whenPressed(new AutoShoot());
stopShooter = new JoystickButton(operatorJoystick, 8);
stopShooter.whenPressed(new StopShooter());
runShooter = new JoystickButton(operatorJoystick, 7);
runShooter.whenPressed(new RunShooter(3500));
feedOut = new JoystickButton(operatorJoystick, 6);
feedOut.whileHeld(new FeedOut());
feedIn = new JoystickButton(operatorJoystick, 5);
feedIn.whileHeld(new FeedIn());
reverseBall = new JoystickButton(operatorJoystick, 4);
reverseBall.whileHeld(new ReverseBall());
intakeBall = new JoystickButton(operatorJoystick, 3);
intakeBall.whileHeld(new IntakeBall());
angleDown = new JoystickButton(operatorJoystick, 2);
angleDown.whileHeld(new AngleDown());
angleUp = new JoystickButton(operatorJoystick, 1);
angleUp.whileHeld(new AngleUp());
driverJoystick = new Joystick(0);

retractCollector = new JoystickButton(driverJoystick, 1);
retractCollector.whenPressed(new RetractCollector());
extendCollector = new JoystickButton(driverJoystick, 1);
extendCollector.whenPressed(new ExtendCollector());
autoLine = new JoystickButton(driverJoystick, 1);
autoLine.whenPressed(new DrivePastAutoLine());


        // SmartDashboard Buttons
        SmartDashboard.putData("DrivePastAutoLine", new DrivePastAutoLine());
        SmartDashboard.putData("ExtendCollector", new ExtendCollector());
        SmartDashboard.putData("RetractCollector", new RetractCollector());
        SmartDashboard.putData("IntakeBall", new IntakeBall());
        SmartDashboard.putData("ReverseBall", new ReverseBall());
        SmartDashboard.putData("AngleUp", new AngleUp());
        SmartDashboard.putData("AngleDown", new AngleDown());
        SmartDashboard.putData("RunShooter", new RunShooter(3500));
        SmartDashboard.putData("StopShooter", new StopShooter());
        SmartDashboard.putData("FeedIn", new FeedIn());
        SmartDashboard.putData("FeedOut", new FeedOut());
        SmartDashboard.putData("AutoShoot", new AutoShoot());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
public Joystick getDriverJoystick() {
        return driverJoystick;
    }

public Joystick getOperatorJoystick() {
        return operatorJoystick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

