// RobotBuilder Version: 3.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import com.revrobotics.CANEncoder;
import com.revrobotics.CANPIDController;
import com.revrobotics.ControlType;
import com.revrobotics.EncoderType;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import com.revrobotics.SimableCANSparkMax;
import edu.wpi.first.wpilibj.RobotBase;
import edu.wpi.first.wpilibj.simulation.FlywheelSim;
import edu.wpi.first.wpilibj.system.plant.DCMotor;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import org.snobotv2.module_wrappers.rev.RevEncoderSimWrapper;
import org.snobotv2.module_wrappers.rev.RevMotorControllerSimWrapper;
import org.snobotv2.sim_wrappers.FlywheelSimWrapper;
import org.snobotv2.sim_wrappers.ISimWrapper;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Shooter extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private static final double FEED_SPEED = 0.1;
    private static final double ANGLE_SPEED = 0.5;
    private static final double ALLOWED_ERROR = 0.02;
    private final CANEncoder m_encoder;
    private final CANPIDController m_pidController;



    private final SimableCANSparkMax m_feederWheel;
    private final SimableCANSparkMax m_shooterWheel;
    private final SimableCANSparkMax m_shooterHood;

    private double m_rpmGoal;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    private ISimWrapper m_simulator;

    /**
     *
     */
    public Shooter() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        m_feederWheel = new SimableCANSparkMax(8, MotorType.kBrushed);
        m_feederWheel.setInverted(false);

        m_shooterWheel = new SimableCANSparkMax(9, MotorType.kBrushed);
        m_shooterWheel.setInverted(false);

        m_shooterHood = new SimableCANSparkMax(10, MotorType.kBrushed);
        m_shooterHood.setInverted(false);

        m_encoder  = m_shooterWheel.getEncoder(EncoderType.kQuadrature, 8192);
        m_pidController = m_shooterWheel.getPIDController();

        m_pidController.setFF(0.4);
        m_pidController.setP(0.4);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        if (RobotBase.isSimulation()) {

            FlywheelSim flywheelSim = new FlywheelSim(DCMotor.getVex775Pro(2), 1.66, .008);
            m_simulator = new FlywheelSimWrapper(flywheelSim,
                    new RevMotorControllerSimWrapper(m_shooterWheel),
                    RevEncoderSimWrapper.create(m_shooterWheel));
        }
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    public void angleUp() {
        m_shooterHood.set(ANGLE_SPEED);
    }

    public void angleDown() {
        m_shooterHood.set(-ANGLE_SPEED);
    }

    public void angleStop() {
        m_shooterHood.stopMotor();
    }

    @Override
    public void simulationPeriodic() {
        m_simulator.update();
    }

    public void runShooter(double rpm) {
        m_pidController.setReference(rpm, ControlType.kVelocity);
        m_rpmGoal = rpm;
    }

    public void stopShooter() {
        m_shooterWheel.set(0);
    }

    public void feedIn() {
        m_feederWheel.set(FEED_SPEED);
    }

    public void feedOut() {
        m_feederWheel.set(-FEED_SPEED);
    }

    public void feedStop() {
        m_feederWheel.stopMotor();
    }

    public boolean isShooterAtSpeed() {
        return Math.abs(m_rpmGoal - m_encoder.getVelocity()) / m_rpmGoal <= ALLOWED_ERROR;
    }

}
