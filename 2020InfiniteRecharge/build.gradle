plugins {
    id "java"
    id "eclipse"
    id "edu.wpi.first.GradleRIO" version "2020.2.2"
    id "com.snobot.simulator.plugin.SnobotSimulatorPlugin" version "2020-0.0.0" apply false
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = false

/////////////////////////////////////////////////////
// Snobot Sim
sourceSets {
    simulatorExtensions
    {
        java {
            srcDirs += ["src/snobot_sim/java"]
        }
    }
}
apply plugin: com.snobot.simulator.plugin.SnobotSimulatorPlugin
apply from: "snobotsim/snobot_sim.gradle"
// End Snobot Sim
/////////////////////////////////////////////////////

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.deps.wpilib()
    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)


    implementation wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    testImplementation 'junit:junit:4.12'

    // Enable simulation gui support. Must check the box in vscode to enable support
    // upon debugging
    simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

/////////////////////////////////////////////////////
// Widget Helper

repositories {
    mavenLocal()
    maven { url "http://raw.githubusercontent.com/pjreiniger/maven_repo/master" }
}

configurations {
    coordinate_gui_widget
}

dependencies {
    // Helper for getting the coordinate gui from maven into the shuffleboard area
    coordinate_gui_widget 'org.snobot.coordinate_gui:CoordinateGuiWidget2020:2020.0.0'
    coordinate_gui_widget 'com.gos.infinite_recharge.sd_widgets:RobotWidget:1.0.0'
}

task deleteOldWidgets(type: Delete) {
    delete fileTree("${System.getProperty("user.home")}/Shuffleboard/plugins") {
        include '**/*.jar'
    }
    followSymlinks = true
}

task copyWidgets(type: Copy, dependsOn: deleteOldWidgets) {
    group = "Girls of Steel"
    description = "Copies any Girls of Steel widgets from maven into the shuffleboard area"
    from configurations.coordinate_gui_widget
    into("${System.getProperty("user.home")}/Shuffleboard/plugins")
}
/////////////////////////////////////////////////////

apply from: "../styleguide.gradle"

checkstyle {
    ignoreFailures = true
}
pmd {
    ignoreFailures = true
}